// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["debian-openssl-3.0.x", "darwin-arm64", "linux-musl-arm64-openssl-3.0.x", "debian-openssl-1.1.x","linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Address {
  id        Int   @id @default(autoincrement())
  street    String
  suite     String
  city      String
  zipcode   String
  geoId     Int
  geo      Geo @relation(fields: [geoId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  users     User[]

}

model Company {
  id        Int   @id @default(autoincrement())
  name      String
  catchPhrase String
  bs        String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  users     User[]
}

model Geo {
  id        Int   @id @default(autoincrement())
  lat       String
  lng       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  address   Address[] 
}

model Post {
  id        Int   @id @default(autoincrement())
  title     String
  body      String  @db.Text()
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model User {
  id        Int   @id @default(autoincrement())
  name      String?
  username  String   @unique
  email     String   @unique
  addressId Int
  address   Address @relation(fields: [addressId], references: [id])
  phone     String
  website   String
  companyId Int
  company   Company @relation(fields: [companyId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  posts      Post[]
}